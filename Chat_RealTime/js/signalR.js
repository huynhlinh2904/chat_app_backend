let currentEmployee = null;
const currentUser = JSON.parse(localStorage.getItem(infoUser));
const currentUserId = currentUser?.infoUser.USER_ID;
const connection = new signalR.HubConnectionBuilder()
  .withUrl("https://localhost:44333/chathub")
  .withAutomaticReconnect()
  .configureLogging(signalR.LogLevel.Information)
  .build();

// const currentUser = JSON.parse(localStorage.getItem("DEMOinfoUser"));

// K·∫øt n·ªëi t·ªõi Hub
async function startConnection() {
  try {
    await connection.start();
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi SignalR");
  } catch (err) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi SignalR:", err);
    setTimeout(startConnection, 3000);
  }
}
startConnection();

// Handle receiving messages
connection.on("ReceiveMessage", (message) => {
  console.log("New message received:", message);
  // Update the UI with the new message
  modal_Main.appendMessage(message);
});
connection.on('JoinedConversation', function (conversationId) {
  console.log('ƒê√£ tham gia ph√≤ng:', conversationId)
  // B·∫°n c√≥ th·ªÉ x·ª≠ l√Ω g√¨ ƒë√≥ th√™m ·ªü ƒë√¢y n·∫øu c·∫ßn
})

connection.on('LeftConversation', function (conversationId) {
  console.log('ƒê√£ r·ªùi ph√≤ng:', conversationId)
})
connection.on("RefreshConversations", (senderId) => {
  if (senderId !== currentUserId) {

    // Reset bi·∫øn ph√¢n trang v√† danh s√°ch
    modal_Main._list_NVtheoPB = [];
    modal_Main.pageIndexUser = 1;
    modal_Main.allUser = false;

    // G·ªçi l·∫°i ƒë·ªÉ load nh√≥m v√† danh s√°ch user m·ªõi nh·∫•t
    modal_Main.loaddata_NVtheoPB();
  }
});

connection.on("RefreshConversationsGroup", (senderId) => {
  if (senderId !== currentUserId) {

    modal_Main.pageIndexGroup = 1; // reset l·∫°i v·ªÅ trang ƒë·∫ßu
    modal_Main.isLoadingGroup = false; // cho ph√©p g·ªçi l·∫°i

    // G·ªçi l·∫°i ƒë·ªÉ load nh√≥m v√† danh s√°ch user m·ªõi nh·∫•t
    modal_Main.get_Group(modal_Main.currentUser);
  }
});

connection.on("ReceiveDeletedMessage", function (messageId) {
  console.log("üßπ Nh·∫≠n s·ª± ki·ªán x√≥a:", messageId)

  const msgElement = document.getElementById(`message-${messageId}`);
  if (!msgElement) {
    console.warn("‚ùó Kh√¥ng t√¨m th·∫•y message DOM v·ªõi ID:", messageId)
    return;
  }

  const bubble = msgElement.querySelector(".chat-bubble");
  if (bubble) {
    bubble.innerHTML = `<div class="text-muted fst-italic">[tin nh·∫Øn ƒë√£ x√≥a]</div>`;
  }
});

function timeAgo(dateString) {
  const now = new Date();
  const messageTime = new Date(dateString);
  const diffMs = now - messageTime;

  const seconds = Math.floor(diffMs / 1000);
  const minutes = Math.floor(diffMs / (1000 * 60));
  const hours = Math.floor(diffMs / (1000 * 60 * 60));
  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  if (seconds < 60) return "V·ª´a xong";
  if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`;
  if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
  if (days < 30) return `${days} ng√†y tr∆∞·ªõc`;
  if (months < 12) return `${months} th√°ng tr∆∞·ªõc`;
  return `${years} nƒÉm tr∆∞·ªõc`;
}
